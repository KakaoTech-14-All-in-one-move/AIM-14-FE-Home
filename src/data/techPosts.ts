export interface TechPost {
  id: string;
  title: string;
  description: string;
  category: string;
  date: string;
  author: string;
  readTime: string;
  imageUrl: string;
  content: string;
  tags: string[];
}

export const techPosts: TechPost[] = [
  {
    id: 'fastapi-cors-solution',
    title: 'FastAPI에서 CORS 에러 해결하기: VLM 영상 처리 서버 개발기',
    description: 'FastAPI와 Swagger를 사용한 VLM 영상 처리 서버 개발 중 마주친 CORS 에러 해결 과정과 보안 고려사항을 공유합니다.',
    category: 'Backend',
    date: '2024-10-23',
    author: 'Toby.kim (김대현)',
    readTime: '10분',
    imageUrl: '/images/tech/fastapi-cors.png',
    content: `
FastAPI와 Swagger를 사용하여 VLM 영상 처리 서버를 개발하고, AWS EC2에 배포하는 과정에서 예상치 못한 CORS(Cross-Origin Resource Sharing) 에러를 마주치게 되었습니다. 이 글에서는 CORS 에러의 원인과 해결 과정, 그리고 운영 환경에서의 보안 고려사항을 상세히 다루어보겠습니다.

## 문제 상황

프론트엔드(http://localhost:5173)에서 FastAPI 서버(http://43.202.66.178:8000)로 API 요청을 보냈을 때 다음과 같은 CORS 오류가 발생했습니다:

\`\`\`plaintext
Access to fetch at 'http://43.202.66.178:8000/api/video/receive-video/' 
from origin 'http://localhost:5173' has been blocked by CORS policy: 
No 'Access-Control-Allow-Origin' header is present on the requested resource.
\`\`\`

이 에러로 인해 AI Server에서 프론트엔드 및 백엔드 API에 접근할 수 없었습니다.

## CORS의 이해

CORS는 웹 브라우저에서 보안상의 이유로 도메인 간의 요청을 제한하는 정책입니다. 예를 들어, 프론트엔드가 http://localhost:5173에서 실행되고 백엔드가 http://43.202.66.178:8000에 있을 때, 두 도메인이 다르기 때문에 브라우저는 기본적으로 이러한 요청을 차단합니다.

문제 해결 과정

FastAPI에서는 CORSMiddleware를 사용하여 CORS 문제를 해결할 수 있습니다. 개발 환경과 운영 환경에서의 설정 방법을 알아보겠습니다.

1. 개발 환경 설정
개발 중에는 모든 출처를 허용하여 빠른 테스트가 가능하도록 설정할 수 있습니다:

\`\`\`python
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],    # 모든 출처 허용
    allow_methods=["*"],    # 모든 HTTP 메소드 허용
    allow_headers=["*"],    # 모든 헤더 허용
    allow_credentials=False  # 자격 증명 비허용
)
\`\`\`

2. 운영 환경 설정
보안을 강화하기 위해 특정 출처만 허용하도록 설정합니다:

\`\`\`python
origins = [
    "https://your-frontend-domain.com",
    "https://api.your-domain.com"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["Content-Type", "Authorization"],
    allow_credentials=True
)
\`\`\`

보안 고려사항

1. 출처 제한
• 운영 환경에서는 반드시 허용할 출처를 명시적으로 지정
• 와일드카드(*) 사용 지양
• 정기적인 허용 출처 목록 검토 및 업데이트

2. 인증 및 권한
• allow_credentials 설정 시 보안 영향 고려
• 필요한 경우에만 자격 증명 허용
• 토큰 기반 인증 구현

3. 요청 제한
• 필요한 HTTP 메서드만 허용
• 필요한 헤더만 허용
• Rate limiting 구현 고려

실제 운영 시 주의사항

1. 환경별 설정 분리
• 개발, 스테이징, 운영 환경에 따른 CORS 설정 분리
• 환경 변수를 통한 설정 관리

2. 모니터링
• CORS 관련 오류 모니터링
• 비정상적인 요청 패턴 감지
• 로그 분석 및 대응

결론

CORS 에러는 프론트엔드와 백엔드의 도메인이 다를 때 흔히 발생하는 문제입니다. FastAPI의 CORSMiddleware를 활용하면 이를 효과적으로 해결할 수 있으며, 운영 환경에서는 보안을 고려한 적절한 설정이 필요합니다. 

개발 단계에서는 빠른 개발을 위해 모든 출처를 허용할 수 있지만, 운영 환경으로 이전할 때는 반드시 보안을 강화하여 특정 출처만 허용하도록 설정해야 합니다. 또한, 정기적인 보안 검토와 모니터링을 통해 시스템의 안전성을 유지하는 것이 중요합니다.
    `,
    tags: ['FastAPI', 'CORS', 'Backend', 'Security', 'AWS', 'API Development']
  },
  {
    id: 'cloud-ci-cd',
    title: '무중단 배포부터 모니터링까지: 안정적인 서비스 운영을 위한 핵심 가이드',
    description: '무중단 배포, CI/CD, 프론트엔드 및 백엔드 배포 전략, 그리고 모니터링 도구에 대해 자세히 알아보겠습니다.',
    category: 'Cloud & Infra',
    date: '2024-09-28',
    author: 'Selina.lee (이소민)',
    readTime: '20분',
    imageUrl: '/images/tech/cloud-first.png',
    content: `
# 무중단 배포부터 모니터링까지: 안정적인 서비스 운영을 위한 핵심 가이드

현대의 소프트웨어 개발 환경에서는 **빠른 배포**와 **안정적인 서비스 운영**이 필수적입니다...

# 무중단 배포부터 모니터링까지: 안정적인 서비스 운영을 위한 핵심 가이드

현대의 소프트웨어 개발 환경에서는 **빠른 배포**와 **안정적인 서비스 운영**이 필수적입니다. 특히, 사용자가 서비스를 중단 없이 이용할 수 있도록 하는 **무중단 배포**는 필수적인 요소로 자리 잡았습니다. 여기에 **CI/CD 파이프라인**, **프론트엔드 및 백엔드 배포 전략**, 그리고 **모니터링 도구**를 적절히 결합하면, 개발과 운영의 효율성을 극대화할 수 있습니다.

이번 글에서는 무중단 배포와 이를 뒷받침하는 다양한 기술과 도구를 **기술 블로그 스타일**로 심도 있게 다뤄보겠습니다.

---

## 무중단 배포 (Zero Downtime Deployment)

### 무중단 배포란?
무중단 배포는 **서비스를 중단하지 않고 새로운 버전을 배포**하는 방식입니다. 이는 사용자 경험을 보호하면서, 개발팀이 **지속적으로 변경 사항을 릴리스**할 수 있게 해줍니다.

#### 왜 필요한가?
1. **사용자 경험 보장**: 중단 없는 서비스를 통해 이탈률을 줄임.
2. **빠른 피드백 루프**: 실시간 문제 탐지 및 수정 가능.
3. **비즈니스 손실 최소화**: 다운타임으로 인한 매출 손실 방지.

---

### 무중단 배포 방식 비교
|배포 방식 | 장점 | 단점 | 적합한 상황 |
|----------|------|------|------------|
| 롤링 배포 | 자원 효율적, 설정 간단 | 트래픽 집중 가능, 호환성 이슈 발생 가능 | 단순 애플리케이션 |
| 블루 그린 배포 | 롤백 용이, 안전한 전환 가능 | 높은 자원 소모, 환경 관리 필요 | 대규모 또는 미션 크리티컬 애플리케이션 |
| 카나리 배포 | 빠른 문제 탐지, 점진적 배포 가능 | 호환성 문제 발생 가능, 설정 복잡 | 사용자 경험 테스트에 민감한 서비스 |

#### 롤링 배포 (Rolling Deployment)
- **원리**: 기존 애플리케이션 인스턴스를 하나씩 새로운 버전으로 교체.
- **장점**: 자원을 적게 소모하며 설정이 비교적 단순.
- **단점**: 배포 중 트래픽이 집중될 가능성이 있으며, 이전 버전과 호환성 문제가 발생할 수 있음.
- **적합 사례**: 소규모 애플리케이션 또는 자원 제약이 있는 환경.

#### 블루 그린 배포 (Blue-Green Deployment)
- **원리**: 두 개의 동일한 환경(Blue와 Green)을 유지하며 트래픽을 전환.
- **장점**: 롤백이 용이하며, 배포 환경을 재활용할 수 있음.
- **단점**: 시스템 자원이 두 배로 필요하며, 관리가 복잡.
- **적합 사례**: 안정성이 중요한 대규모 애플리케이션.

#### 카나리 배포 (Canary Deployment)
- **원리**: 일부 사용자에게만 새로운 버전을 먼저 배포 후 점진적으로 확장.
- **장점**: 초기 단계에서 문제를 빠르게 발견하고 대응 가능.
- **단점**: 설정이 복잡하고, 초기 사용자의 피드백이 중요.
- **적합 사례**: 사용자 경험이 중요한 서비스(예: B2C 플랫폼).

---

## CI/CD와 무중단 배포의 차이점

### CI/CD란?
CI/CD(Continuous Integration/Continuous Delivery)는 코드 변경 사항을 자동으로 빌드, 테스트, 배포하는 파이프라인입니다. **효율적인 코드 통합**과 **자동화된 릴리스**를 통해 개발 속도와 품질을 높이는 데 중점을 둡니다.

#### CI/CD와 무중단 배포의 차이

| 항목 | CI/CD | 무중단 배포 |
|------|-------|------------|
| 목적 | 코드 통합과 배포 자동화 | 다운타임 없는 안정적 배포 |
| 중점 대상 | 개발자와 팀의 협업 | 사용자 경험 및 서비스 안정성 |
| 기술적 요소 | 빌드, 테스트, 배포 파이프라인 | 롤링, 블루 그린, 카나리 배포 전략 |
| 활용 사례 | 빠른 프로토타이핑, 단일 개발팀 중심 | 대규모 분산 시스템, 사용자 트래픽 많은 서비스 |

---

## 프론트엔드 배포 전략: AWS S3와 CloudFront

### AWS S3와 CloudFront
**AWS S3**는 오브젝트 스토리지 서비스로, 정적 웹 콘텐츠를 저장하고 배포하는 데 유용합니다. 이를 **CloudFront**와 결합하면 **글로벌 캐시를 활용한 빠른 파일 서빙**이 가능합니다.

#### 주요 설정 예시
\`\`\`json
{
    "S3Bucket": "my-bucket",
    "CloudFrontDistribution": {
        "Origin": "my-bucket.s3.amazonaws.com",
        "CacheBehavior": {
            "PathPattern": "*",
            "TargetOriginId": "S3-my-bucket",
            "ViewerProtocolPolicy": "redirect-to-https"
        }
    }
}
\`\`\`

#### 장점과 단점
- **장점**
  - 글로벌 사용자 대상 빠른 파일 제공.
  - 데이터 복제 및 캐싱으로 안정성 향상.
- **단점**
  - 초기 설정 및 관리 복잡.
  - 네트워크 의존성으로 인한 지연 가능성.

---

## 백엔드 배포 전략: Nginx와 AWS SQS

### Nginx
**Nginx**는 고성능의 리버스 프록시 및 웹 서버로, **로드밸런싱**과 **SSL 처리**를 통해 백엔드 안정성을 보장합니다.

#### 주요 기능
- **리버스 프록시**: 클라이언트 요청을 내부 서버로 전달.
- **로드밸런싱**: 여러 서버에 트래픽 균등 분배.
- **캐싱**: 서버 응답을 캐싱하여 응답 속도 향상.

#### 장점과 단점
- **장점**
  - 가볍고 빠름, 높은 동시 연결 처리 능력.
  - 설정 변경 시 프로세스 재시작 없이 적용 가능.
- **단점**
  - 모듈 확장성이 제한적.
  - 복잡한 설정 시 관리 부담.

### AWS SQS
AWS SQS는 **분산 메시지 큐**로, 시스템 간 비동기 메시지를 안전하게 처리할 수 있습니다.

#### 주요 장점
- 비동기 처리로 시스템 부하 감소.
- 확장성과 내구성을 제공.
- 메시지 암호화와 AWS 통합.

#### 주의 사항
- 최대 메시지 크기 제한(256KB).
- 비동기 동작으로 인한 약간의 지연 발생.

---

## 모니터링 도구: Prometheus와 Grafana

### Prometheus
Prometheus는 **시계열 데이터** 수집 및 분석을 위한 오픈 소스 도구로, **Kubernetes 환경**에서 특히 강력합니다.

#### 특징
- **시계열 데이터 처리**: 대규모 메트릭 처리 가능.
- **클라우드 네이티브 최적화**: Kubernetes와 통합.

#### 주의할 점
- 장기 데이터 보관이 어려움 → Thanos 등 보완 도구 필요.
- 복잡한 쿼리 언어와 설정 학습 곡선이 있음.

### Grafana
**Grafana**는 데이터를 시각적으로 표현하는 데 특화된 도구로, Prometheus와 함께 사용하면 더욱 강력합니다.

#### 주요 장점
- 다양한 데이터 소스 지원(MySQL, Elasticsearch 등).
- 사용자 정의 대시보드를 통한 실시간 모니터링.

#### 주의할 점
- 데이터 소스에 대한 의존성이 높음.
- 보안 설정 필요.

---

## 결론

안정적인 서비스 운영을 위해 **무중단 배포**, **CI/CD 파이프라인**, **효율적인 프론트엔드 및 백엔드 배포 전략**, **강력한 모니터링 도구**가 조화를 이루어야 합니다. 각 기술의 특성과 적합성을 이해하고, 프로젝트의 요구 사항에 맞게 선택적으로 활용하세요.

꾸준한 학습과 최신 기술 적용으로 **서비스의 안정성과 사용자 만족도**를 모두 높이는 DevOps 환경을 구축해보세요.

    `,
    tags: ['CI/CD', 'DevOps', 'Cloud', 'Monitoring', 'Infrastructure', 'AWS', 'Kubernetes']
  },
  {
    id: 'agile-backlog-management',
    title: '프로덕트 백로그과 스프린트 백로그: 효과적인 애자일 프로젝트 관리의 핵심',
    description: '애자일 프로젝트 관리에서 핵심적인 프로덕트 백로그와 스프린트 백로그의 개념, 차이점, 그리고 효과적인 관리 방법을 상세히 알아봅니다.',
    category: 'Project Management',
    date: '2024-10-12',
    author: 'Toby.kim (김대현)',
    readTime: '15분',
    imageUrl: '/images/tech/agile-backlog.png',
    content: `
## **애자일(Agile)로 혁신 조직의 첫 발걸음을 내딛다: 프로덕트 백로그와 스프린트 백로그**

### **프로덕트 백로그(Product Backlog) 백로그란?**
프로덕트 백로그는 **제품을 구성하는 핵심 기능들을 목록화**한 것입니다. 이 목록의 각 아이템은 **PBI(Product Backlog Item)**으로, 고객에게 제공되는 서비스의 핵심 기능 단위를 나타냅니다.

PBI는 에픽(Epic)과 스토리(Story)의 하위 개념으로, **업무의 시급성, 난이도, 구현 가능성 등을 고려하여 우선순위가 관리**됩니다. 예를 들어, "SNS 소셜 로그인 기반의 계정 관리 및 본인 인증"과 같은 스토리에서 도출된 PBI는 다음과 같습니다:

- OAuth2를 사용한 소셜 로그인 ��현
- 사용자 인증 상태를 유지하는 세션 관리 시스템 개발
- 실패 시 사용자에게 명확한 오류 메시지 제공

### **우리 팀의 제품 백로그 예시**

#### **1. 발표 모드 (영상)**
- **1.1 영상 녹화 기능**
  - 사용자가 발표를 녹화할 수 있는 기능 구현
  - 다양한 기기와 브라우저 호환성 확보

- **1.2 시선 처리 분석**
  - 발표 중 사용자의 시선 처리를 분석하여 피드백 제공

- **1.3 표정 평가**
  - 얼굴 인식을 통해 표정 평가 및 개선 사항 제안

- **1.4 제스처 평가**
  - 컴퓨터 비전을 활용한 제스처 분석 및 피드백 제공

- **1.5 음성 분석**
  - 말하기 속도, 음의 높낮이, 억양 분석 및 시각적 피드백 제공

#### **2. 발음 모드 (음성)**
- **2.1 음성 녹음 기능**
  - 고품질 음성 캡처 및 재생 지원

- **2.2 음성 분석**
  - 녹음된 음성의 억양과 속도 분석 후 피드백 제공

- **2.3 사투리 교정**
  - 지역 사투리를 감지하고 표준 발음으로 교정

#### **3. 화상 회의에서의 실시간 교정**
- **3.1 화상 회의 기능**
  - 1:1 및 그룹 화상 회의 기능 구현

- **3.2 실시간 피드백**
  - 참가자의 음성과 비언어적 요소를 실시간 분석 후 피드백 제공

#### **4. 채팅 기능**
- **4.1 실시간 채팅**
  - 개인 및 그룹 채팅 시스템 구현

#### **5. 사용자 계정 관리**
- **5.1 사용자 등록 및 로그인**
  - 이메일, 비밀번호 인증 및 OAuth 지원

- **5.2 프로필 관리**
  - 개인정보 및 프로필 이미지 관리 기능 구현

---

## **스프린트 백로그(Sprint Backlog)**

### **스프린트 백로그란?**
스프린트 백로그는 PBI를 달성하기 위한 **세부 업무(Task)들의 집합**입니다. 스프린트는 짧은 기간 동안 집중적으로 작업을 수행하는 과정을 의미하며, 각 업무는 세부적인 기술 요소와 프로세스로 정리됩니다.

### **우리 팀의 스프린트 1 예시**

#### **목표:**
- 프로젝트 아이디어 구체화 및 기본 설계
- 협업 환경 구축

#### **진행된 작업:**
- **아이디어 발상 및 선정**: 팀 브레인스토밍을 통해 프로젝트 아이디어 발굴 및 최종 선정
- **정보 구조 설계(IA)**: 프로젝트 정보 구조 설계 및 주요 기능 정의
- **협업 도구 설정**: 프로젝트 관리 및 커뮤니케이션 도구 선정 (예: GitHub, Jira, Slack)
- **그라운드 룰 설정**: 팀원 간 협업 규칙, 일정, 커뮤니케이션 방식 정의

#### **태스크:**
- **시장 조사 및 경쟁 분석**: 유사 서비스 ���사 및 차별화 요소 확인
- **프로젝트 목표 및 비전 설정**: 장기적인 목표와 비전 수립
- **주요 기능 목록 작성**: 제품 백로그에 포함될 주요 기능 식별 및 우선순위 결정
- **프로젝트 일정 계획**: 전체 프로젝트 일정 및 마일스톤 설정
- **팀 역할 분담**: 팀원 역할과 책임 정의
- **협업 도구 교육**: 사용 방법 공유 및 권한 설정

---

## **결론**
애자일(Agile) 방식의 핵심은 **효율적인 협업과 지속적인 개선**입니다. 프로덕트 백로그와 스프린트 백로그는 이러한 협업과 개선을 구체화하는 중요한 도구입니다. 체계적으로 업무를 분담하고, 피드백을 반영하며 목표를 달성해나가는 과정을 통해 혁신적인 제품을 완성할 수 있습니다.

**팀원 모두의 협력과 소통이 애자일 성공의 열쇠입니다!**


    `,
    tags: ['Agile', 'Scrum', 'Product Backlog', 'Sprint Backlog', 'Project Management']
  }
];

export const findPostById = (id: string): TechPost | undefined => {
  return techPosts.find(post => post.id === id);
}; 